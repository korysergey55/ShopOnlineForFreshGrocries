{"version":3,"sources":["stores/Products.ts","stores/index.ts","config.ts","utils/history.ts","containers/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["makeAutoObservable","this","product","trendingProducts","bestProducts","relatedProducts","foto","observable","action","configure","enforceActions","RootStore","productStore","rootStore","StoreContext","createContext","useStore","store","useContext","Error","axios","create","baseURL","process","REACT_APP_HOST","interceptors","response","use","error","Promise","reject","createBrowserHistory","Main","lazy","ProductDetailsPage","App","componentDidMount","render","history","fallback","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8MAsCe,M,aApBb,aAAe,mLACbA,YAAmBC,M,sDAMrB,SAA2BC,GACzBD,KAAKE,iBAAmBD,I,4BAE1B,SAAuBA,GACrBD,KAAKG,aAAeF,I,+BAEtB,SAA0BA,GACxBD,KAAKI,gBAAkBH,I,sBAEzB,SAAiBI,GACfL,KAAKK,KAAOA,M,mDAtBbC,K,wEAA0C,M,0CAC1CA,K,wEAAsC,M,6CACtCA,K,wEAAyC,M,kCACzCA,K,wEAAsC,M,8CAStCC,K,yHAGAA,K,wHAGAA,K,kHAGAA,K,wEC/BHC,YAAU,CAAEC,eAAgB,a,IAEtBC,G,sHACHJ,K,yEAA0BK,K,GAGvBC,EAAY,IAAIF,EAETG,EAAeC,wBAAyBF,GAExCG,EAAW,WACtB,IAAMC,EAAQC,qBAAWJ,GACzB,IAAKG,EACH,MAAM,IAAIE,MAAM,uDAElB,OAAOF,GAGM,QAAIN,G,wICnBAS,EAAMC,OAAO,CAC9BC,QAASC,gQAAYC,iBAMnBC,aAAaC,SAASC,KACxB,SAAAD,GAEE,OAAOA,KAET,SAAAE,GAEE,OAAOC,QAAQC,OAAOF,M,mFCdXG,gB,QCKTC,EAAOC,gBAAK,kBAAM,8DAClBC,EAAqBD,gBAAK,kBAAM,qEAqBvBE,E,4MAlBbC,kBAAoB,a,EAEpBC,OAAS,WACP,OACE,kBAAC,IAAD,CAAUpB,MAAOA,KACf,kBAAC,IAAD,CAAQqB,QAASA,GACf,kBAAC,WAAD,CAAUC,SAAU,2CAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWV,IACjC,kBAAC,IAAD,CAAOS,KAAK,OAAOC,UAAWR,S,YAV1BS,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,wBCNNC,IAASZ,OAAO,kBAAC,EAAD,MAASa,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2eb05545.chunk.js","sourcesContent":["import {\r\n  makeAutoObservable,\r\n  observable,\r\n  action,\r\n  // configure,\r\n  // computed,\r\n  // reaction,\r\n  // runInAction,\r\n  // toJS,\r\n} from 'mobx'\r\nimport IProduct from '../models/product'\r\n\r\nclass Products {\r\n  @observable trendingProducts: IProduct[] = []\r\n  @observable bestProducts: IProduct[] = []\r\n  @observable relatedProducts: IProduct[] = []\r\n  @observable foto: string | undefined = ''\r\n\r\n  constructor() {\r\n    makeAutoObservable(this)\r\n    // reaction(\r\n    //   () => this.bestProducts,\r\n    //   _ => console.log(toJS(this.bestProducts))\r\n    // )\r\n  }\r\n  @action setTrendingProduct(product: any) {\r\n    this.trendingProducts = product\r\n  }\r\n  @action setBestProduct(product: any) {\r\n    this.bestProducts = product\r\n  }\r\n  @action setRelatedProduct(product: any) {\r\n    this.relatedProducts = product\r\n  }\r\n  @action setPhoto(foto: string | undefined) {\r\n    this.foto = foto\r\n  }\r\n}\r\nexport default new Products()\r\n","import { createContext, useContext } from 'react'\r\nimport { configure, observable } from 'mobx'\r\nimport productStore from '../stores/Products'\r\nconfigure({ enforceActions: 'observed' })\r\n\r\nclass RootStore {\r\n  @observable productStore = productStore\r\n}\r\n\r\nconst rootStore = new RootStore()\r\n\r\nexport const StoreContext = createContext<RootStore>(rootStore)\r\n\r\nexport const useStore = (): RootStore => {\r\n  const store = useContext(StoreContext)\r\n  if (!store) {\r\n    throw new Error('You have forgot to use StoreProvider, shame on you.')\r\n  }\r\n  return store\r\n}\r\n\r\nexport default new RootStore()\r\n","import axios from 'axios'\r\n\r\nexport const api = axios.create({\r\n  baseURL: process.env.REACT_APP_HOST,\r\n})\r\n\r\n// here you can define constant's for project or inintial configuration for packages\r\n\r\n// response middleware\r\napi.interceptors.response.use(\r\n  response => {\r\n    // here you can check authorized user or not (401) or something global response functions\r\n    return response\r\n  },\r\n  error => {\r\n    // api error handler\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n","import { createBrowserHistory } from 'history'\r\n\r\nexport default createBrowserHistory()\r\n\r\n","import React, { Component, Suspense, lazy } from 'react'\r\n// import Main from '../Public/Main/index'\r\n// import ProductDetailsPage from 'containers/Public/ProductDetailsPage'\r\nimport { Router, Switch, Route } from 'react-router'\r\nimport { Provider } from 'mobx-react'\r\nimport history from 'utils/history'\r\nimport store from 'stores'\r\nconst Main = lazy(() => import('../Public/Main/index'))\r\nconst ProductDetailsPage = lazy(() => import('containers/Public/ProductDetailsPage'))\r\n\r\nclass App extends Component {\r\n  componentDidMount = (): void => {}\r\n\r\n  render = (): JSX.Element => {\r\n    return (\r\n      <Provider store={store}>\r\n        <Router history={history}>\r\n          <Suspense fallback={<h2>...Loading</h2>}>\r\n            <Switch>\r\n              <Route exact path=\"/\" component={Main} />\r\n              <Route path=\"/:id\" component={ProductDetailsPage} />\r\n            </Switch>\r\n          </Suspense>\r\n        </Router>\r\n      </Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    )\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import './config'\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './containers/App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\n// normalize and basic styles for application\r\nimport 'normalize.css'\r\nimport 'antd/dist/antd.css'\r\nimport 'sources/styles/styles.scss'\r\nimport 'index.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}