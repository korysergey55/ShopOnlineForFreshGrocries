{"version":3,"sources":["containers/Public/Loader/styles.module.scss","stores/Products.ts","stores/ProductsAPI.ts","stores/index.ts","config.ts","utils/history.ts","containers/Public/Loader/index.tsx","containers/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","makeAutoObservable","this","formValue","formData","arr","cart","localStorage","setItem","JSON","stringify","product","setCarts","productId","elementId","find","el","id","filter","item","likes","like","allProducts","trendingProducts","bestProducts","relatedProducts","photo","modal","value","mobxProducts","toLocaleLowerCase","trim","filtered","text","includes","filteredProducts","sortedProducts","sort","min","max","price","a","b","localeCompare","data","felteredByRange","observable","getItem","parse","action","bound","products","allProductsAPI","options","method","headers","body","fetch","then","res","json","setAllProductsAPI","productsAPI","page","BASE_URL","setProductsAPI","configure","enforceActions","RootStore","productStore","productStoreAPI","rootStore","StoreContext","createContext","useStore","store","useContext","Error","axios","create","baseURL","process","REACT_APP_HOST","interceptors","response","use","error","Promise","reject","createBrowserHistory","Loader","className","styles","loader","type","color","height","width","timeout","loadingText","MainPage","lazy","ShopPage","AboutUsPage","ProductDetailsPage","CartPage","LikePage","NotFoundPage","ContactPage","App","componentDidMount","render","history","fallback","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,YAAc,8B,0KC8HjD,M,aAnGb,aAAe,+aACbC,YAAmBC,M,+CAMrB,SAAoBC,GAClBD,KAAKE,SAAL,sBAAoBF,KAAKE,UAAzB,CAAmCD,M,sBAErC,SAAiBE,GACfH,KAAKI,KAAL,YAAgBD,GAChBE,aAAaC,QAAQ,OAAQC,KAAKC,UAAUR,KAAKI,S,uBAEnD,SAAkBK,GAChBT,KAAKU,SAAL,sBAAkBV,KAAKI,MAAvB,CAA6BK,O,4BAO/B,SAAuBE,GACrB,IAAMC,EAAYZ,KAAKI,KAAKS,MAAK,SAAAC,GAAE,OAAIA,EAAGC,KAAOJ,KAC7CC,GACFZ,KAAKU,SAAL,YAAkBV,KAAKI,KAAKY,QAAO,SAAAC,GAAI,OAAIA,EAAKF,KAAOH,EAAUG,U,qBAIrE,SAAgBN,GACdT,KAAKkB,MAAL,sBAAiBlB,KAAKkB,OAAtB,CAA6BT,M,wBAE/B,SAAmBM,GACjBf,KAAKkB,MAAQlB,KAAKkB,MAAMF,QAAO,SAAAG,GAAI,OAAIA,IAASJ,O,4BAGlD,SAAuBN,GACrBT,KAAKoB,YAAcX,I,gCAErB,SAA2BA,GACzBT,KAAKqB,iBAAmBZ,I,4BAE1B,SAAuBA,GACrBT,KAAKsB,aAAeb,I,+BAEtB,SAA0BA,GACxBT,KAAKuB,gBAAkBd,I,sBAEzB,SAAiBe,GACfxB,KAAKwB,MAAQA,I,sBAEf,WACExB,KAAKyB,OAASzB,KAAKyB,Q,+BAErB,SAA0BC,GACxB,IAAMC,EAAeD,EAAME,oBAAoBC,OACzCC,EAAgB9B,KAAKoB,YAAYJ,QAAO,SAAAP,GAAO,OACnDA,EAAQsB,KAAKH,oBAAoBI,SAASL,MAE5C3B,KAAKiC,iBAAmBH,I,6BAE1B,SAAwBJ,GACtB,GAAc,UAAVA,EAAmB,CACrB,IAAMQ,EAAiBlC,KAAKoB,YAAYe,MACtC,SAACC,EAAKC,GAAN,OAAcA,EAAIC,MAAQF,EAAIE,SAEhCtC,KAAKiC,iBAAmBC,EAE1B,GAAc,SAAVR,EAAkB,CACpB,IAAMQ,EAAiBlC,KAAKoB,YAAYe,MAAK,SAACI,EAAGC,GAAJ,OAC3CD,EAAER,KAAKU,cAAcD,EAAET,SAEzB/B,KAAKiC,iBAAmBC,EAE1B,GAAc,YAAVR,EAAqB,CACvB,IAAMQ,EAAiBlC,KAAKoB,YAAYe,MAAK,SAACI,EAAGC,GAAJ,OAC3CA,EAAET,KAAKU,cAAcF,EAAER,SAEzB/B,KAAKiC,iBAAmBC,K,8BAG5B,SAAyBQ,GACvB,IAAMC,EAAkB3C,KAAKoB,YAAYJ,QACvC,SAAAP,GAAO,OAAIA,EAAQ6B,OAASI,EAAK,IAAMjC,EAAQ6B,OAASI,EAAK,MAE/D1C,KAAKiC,iBAAmBU,M,8CApGzBC,K,wEAAqC,M,8CACrCA,K,wEAA0C,M,0CAC1CA,K,wEAAsC,M,6CACtCA,K,wEAAyC,M,mCACzCA,K,wEAAuC,M,mCACvCA,K,yEAA4B,K,mCAC5BA,K,wEAA6B,M,kCAC7BA,K,yEAA8BvC,aAAawC,QAAQ,QAChDtC,KAAKuC,MAAMzC,aAAawC,QAAQ,SAChC,M,sCACHD,K,wEAAgC,M,oCAEhCA,K,wEAA4B,M,8CAC5BA,K,wEAA0C,M,uCAS1CG,K,4GAGAA,K,0GAIAA,K,gHAQAA,K,8GAOAA,K,0GAGAA,K,iHAIAA,K,yHAGAA,K,yHAGAA,K,wHAGAA,K,kHAGAA,K,yGAGAA,K,kHAGAA,K,yHAOAA,K,wHAoBAA,K,yGCtDY,M,EAnCZA,IAAOC,M,EAuBPD,IAAOC,M,aA1BR,aAAe,qGACbjD,YAAmBC,M,qDAErB,SAAgCiD,GAC9BjD,KAAKkD,eAAL,YAA0BD,K,uEAE5B,WAAiCxC,GAAjC,oFACmB,iCACX0C,EAAU,CACdC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAM/C,KAAKC,UAAUC,IAPzB,SASQ8C,MAAM,GAAD,OARM,kCAQUJ,GACxBK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACJ,EAAKE,kBAAkBF,MAZ7B,2C,mFAoBA,SAA6BR,GAC3BjD,KAAK4D,YAAcX,I,qEAErB,gHAA+BY,EAA/B,+BAA8C,EACtCC,EAAW,iCADnB,SAEQP,MAAM,GAAD,OAAIO,EAAJ,kBAAsBD,EAAtB,cACRL,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAP,GACJ,EAAKc,eAAed,MAL1B,2C,yGAhCCL,K,wEAAiC,M,yCACjCA,K,wEAAqC,M,4KAQrCG,K,mPAuBAA,K,gFC1CHiB,YAAU,CAAEC,eAAgB,a,IAEtBC,G,iKACHtB,K,yEAA0BuB,K,6CAC1BvB,K,yEAA6BwB,K,GAG1BC,EAAY,IAAIH,EAETI,EAAeC,wBAAyBF,GAExCG,EAAW,WACtB,IAAMC,EAAQC,qBAAWJ,GACzB,IAAKG,EACH,MAAM,IAAIE,MAAM,uDAElB,OAAOF,GAGM,QAAIP,G,wICrBAU,EAAMC,OAAO,CAC9BC,QAASC,gQAAYC,iBAMnBC,aAAaC,SAASC,KACxB,SAAAD,GAEE,OAAOA,KAET,SAAAE,GAEE,OAAOC,QAAQC,OAAOF,M,4FCdXG,gB,0CCkBAC,EAjBA,WACb,OACE,gCACE,uBAAKC,UAAWC,IAAOC,QACrB,gBAAC,IAAD,CACEC,KAAK,UACLC,MAAM,WACNC,OAAQ,GACRC,MAAO,GACPC,QAAS,MAEX,sBAAIP,UAAWC,IAAOO,aAAtB,iBCNFC,EAAWC,gBAAK,kBAAM,6EACtBC,EAAWD,gBAAK,kBAAM,4EACtBE,EAAcF,gBAAK,kBAAM,uEACzBG,EAAqBH,gBAAK,kBAAM,6EAChCI,EAAWJ,gBAAK,kBAAM,sEACtBK,EAAWL,gBAAK,kBAAM,sEACtBM,EAAeN,gBAAK,kBAAM,wDAC1BO,EAAcP,gBAAK,kBAAM,4EA2BhBQ,E,4MAxBbC,kBAAoB,a,EAEpBC,OAAS,WACP,OACE,kBAAC,IAAD,CAAUpC,MAAOA,KACf,kBAAC,IAAD,CAAQqC,QAASA,GACf,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,OAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWhB,IACjC,kBAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,QAAQC,UAAWd,IACrC,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,WAAWC,UAAWb,IACxC,kBAAC,IAAD,CAAOW,OAAK,EAACC,KAAK,WAAWC,UAAWR,IACxC,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,eAAeC,UAAWZ,IAC5C,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,QAAQC,UAAWX,IACrC,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,SAASC,UAAWV,IACtC,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,OAAOC,UAAWT,S,YAhBhCU,aCLEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCNNC,IAASZ,OAAO,kBAAC,EAAD,MAASa,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtE,MAAK,SAAAuE,GACjCA,EAAaC,kB","file":"static/js/main.7c939f4d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"styles_loader__354j6\",\"loadingText\":\"styles_loadingText__uR8V8\"};","import {\r\n  makeAutoObservable,\r\n  observable,\r\n  action,\r\n  // computed,\r\n  // configure,\r\n  // reaction,\r\n  // runInAction,\r\n  // toJS,\r\n} from 'mobx'\r\nimport IProduct from '../models/product'\r\n\r\nclass Products {\r\n  @observable allProducts: IProduct[] = []\r\n  @observable trendingProducts: IProduct[] = []\r\n  @observable bestProducts: IProduct[] = []\r\n  @observable relatedProducts: IProduct[] = []\r\n  @observable photo: string | undefined = ''\r\n  @observable modal: boolean = false\r\n  @observable likes: string[] = []\r\n  @observable cart: IProduct[] = localStorage.getItem('cart')\r\n    ? JSON.parse(localStorage.getItem('cart') as string)\r\n    : []\r\n  @observable formData: object[] = []\r\n\r\n  @observable filter: string = ''\r\n  @observable filteredProducts: IProduct[] = []\r\n\r\n  constructor() {\r\n    makeAutoObservable(this)\r\n    // reaction(\r\n    //   () => this.bestProducts,\r\n    //   _ => console.log(toJS(this.bestProducts))\r\n    // )\r\n  }\r\n  @action setFormData(formValue: {}){\r\n    this.formData = [...this.formData, formValue ]\r\n  }\r\n  @action setCarts(arr: IProduct[]) {\r\n    this.cart = [...arr]\r\n    localStorage.setItem('cart', JSON.stringify(this.cart))\r\n  }\r\n  @action addtoCart(product: IProduct) {\r\n    this.setCarts([...this.cart, product])\r\n\r\n    // const id = this.cart.find(el => el.id === product.id);\r\n    // if (!id) {\r\n    //   this.cart = [...this.cart, product]\r\n    // } else {}\r\n  }\r\n  @action removeFromCart(productId: string) {\r\n    const elementId = this.cart.find(el => el.id === productId)\r\n    if (elementId) {\r\n      this.setCarts([...this.cart.filter(item => item.id !== elementId.id)])\r\n    }\r\n  }\r\n\r\n  @action setLike(product: any) {\r\n    this.likes = [...this.likes, product]\r\n  }\r\n  @action removeLike(id: any) {\r\n    this.likes = this.likes.filter(like => like !== id)\r\n  }\r\n\r\n  @action setAllProducts(product: any) {\r\n    this.allProducts = product\r\n  }\r\n  @action setTrendingProduct(product: any) {\r\n    this.trendingProducts = product\r\n  }\r\n  @action setBestProduct(product: any) {\r\n    this.bestProducts = product\r\n  }\r\n  @action setRelatedProduct(product: any) {\r\n    this.relatedProducts = product\r\n  }\r\n  @action setPhoto(photo: string | undefined) {\r\n    this.photo = photo\r\n  }\r\n  @action setModal() {\r\n    this.modal = !this.modal\r\n  }\r\n  @action filterAllProducts(value: string) {\r\n    const mobxProducts = value.toLocaleLowerCase().trim()\r\n    const filtered: any = this.allProducts.filter(product =>\r\n      product.text.toLocaleLowerCase().includes(mobxProducts)\r\n    )\r\n    this.filteredProducts = filtered\r\n  }\r\n  @action sortAllProducts(value: string) {\r\n    if (value === 'price') {\r\n      const sortedProducts = this.allProducts.sort(\r\n        (min, max) => max.price - min.price\r\n      )\r\n      this.filteredProducts = sortedProducts\r\n    }\r\n    if (value === 'name') {\r\n      const sortedProducts = this.allProducts.sort((a, b) =>\r\n        a.text.localeCompare(b.text)\r\n      )\r\n      this.filteredProducts = sortedProducts\r\n    }\r\n    if (value === 'default') {\r\n      const sortedProducts = this.allProducts.sort((a, b) =>\r\n        b.text.localeCompare(a.text)\r\n      )\r\n      this.filteredProducts = sortedProducts\r\n    }\r\n  }\r\n  @action rangeAllProducts(data: [number, number]) {\r\n    const felteredByRange = this.allProducts.filter(\r\n      product => product.price >= data[0] && product.price <= data[1]\r\n    )\r\n    this.filteredProducts = felteredByRange\r\n  }\r\n\r\n  // @action updateFilter(value: string) {\r\n  //   this.filter = value\r\n  // }\r\n  // @computed getFilterAllProducts() {\r\n  //   const mobxProducts = this.filter.toLocaleLowerCase().trim()\r\n  //   const filtered: any = this.allProducts.filter(product => {\r\n  //     product.text.toLocaleLowerCase().includes(mobxProducts)\r\n  //     return filtered\r\n  //   })\r\n  // }\r\n}\r\nexport default new Products()\r\n","import {\r\n  makeAutoObservable,\r\n  observable,\r\n  action,\r\n  // configure,\r\n  // computed,\r\n  // reaction,\r\n  // runInAction,\r\n  // toJS,\r\n} from 'mobx'\r\nimport IProduct from '../models/product'\r\n// import axios from 'axios'\r\n\r\nclass ProductsAPI {\r\n  @observable allProductsAPI: any = []\r\n  @observable productsAPI: IProduct[] = []\r\n\r\n  constructor() {\r\n    makeAutoObservable(this)\r\n  }\r\n  @action.bound setAllProductsAPI(products: any) {\r\n    this.allProductsAPI = [...products]\r\n  }\r\n  @action async fetchAllProductAPI(product: any) {\r\n    const BASE_URL = 'http://localhost:3000/products'\r\n    const options = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(product),\r\n    }\r\n    await fetch(`${BASE_URL}`, options)\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        this.setAllProductsAPI(res)\r\n      })\r\n\r\n    // await axios.post(`${BASE_URL}${product}`).then(res => {\r\n    //   this.setAllProductApi(res)\r\n    // })\r\n  }\r\n  \r\n  @action.bound setProductsAPI(products: any) {\r\n    this.productsAPI = products\r\n  }\r\n  @action async fetchProductsAPI(page: number = 1) {\r\n    const BASE_URL = 'http://localhost:3000/products'\r\n    await fetch(`${BASE_URL}?_page=${page}&_limit=9`)\r\n      .then(res => res.json())\r\n      .then(products => {\r\n        this.setProductsAPI(products)\r\n      })\r\n  }\r\n}\r\nexport default new ProductsAPI()\r\n","import { createContext, useContext } from 'react'\r\nimport { configure, observable } from 'mobx'\r\nimport productStore from '../stores/Products'\r\nimport productStoreAPI from '../stores/ProductsAPI'\r\nconfigure({ enforceActions: 'observed' })\r\n\r\nclass RootStore {\r\n  @observable productStore = productStore\r\n  @observable productStoreAPI = productStoreAPI\r\n}\r\n\r\nconst rootStore = new RootStore()\r\n\r\nexport const StoreContext = createContext<RootStore>(rootStore)\r\n\r\nexport const useStore = (): RootStore => {\r\n  const store = useContext(StoreContext)\r\n  if (!store) {\r\n    throw new Error('You have forgot to use StoreProvider, shame on you.')\r\n  }\r\n  return store\r\n}\r\n\r\nexport default new RootStore()\r\n","import axios from 'axios'\r\n\r\nexport const api = axios.create({\r\n  baseURL: process.env.REACT_APP_HOST,\r\n})\r\n\r\n// here you can define constant's for project or inintial configuration for packages\r\n\r\n// response middleware\r\napi.interceptors.response.use(\r\n  response => {\r\n    // here you can check authorized user or not (401) or something global response functions\r\n    return response\r\n  },\r\n  error => {\r\n    // api error handler\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n","import { createBrowserHistory } from 'history'\r\n\r\nexport default createBrowserHistory()\r\n\r\n","import * as React from 'react'\r\nimport styles from './styles.module.scss'\r\nimport Load from 'react-loader-spinner'\r\nconst Loader = () => {\r\n  return (\r\n    <>\r\n      <div className={styles.loader}>\r\n        <Load\r\n          type=\"Circles\"\r\n          color=\" #9fcb22\"\r\n          height={80}\r\n          width={80}\r\n          timeout={1000}\r\n        />\r\n        <h2 className={styles.loadingText}>...Loading</h2>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Loader\r\n","import React, { Component, Suspense, lazy } from 'react'\r\nimport 'antd/dist/antd.css'\r\nimport { Router, Switch, Route } from 'react-router'\r\nimport { Provider } from 'mobx-react'\r\nimport history from 'utils/history'\r\nimport store from 'stores'\r\nimport Loader from '../Public/Loader/index'\r\n\r\nconst MainPage = lazy(() => import('../Public/Main/index'))\r\nconst ShopPage = lazy(() => import('containers/Public/ShopPage/index'))\r\nconst AboutUsPage = lazy(() => import('containers/Public/AboutUsPage/index'))\r\nconst ProductDetailsPage = lazy(() => import('containers/Public/ProductDetailsPage'))\r\nconst CartPage = lazy(() => import('containers/Public/CartPage/index'))\r\nconst LikePage = lazy(() => import('containers/Public/LikePage/index'))\r\nconst NotFoundPage = lazy(() => import('containers/Public/NotFoundPage/index'))\r\nconst ContactPage = lazy(() => import('containers/Public/ContactPage/index'))\r\n\r\nclass App extends Component {\r\n  componentDidMount = (): void => {}\r\n\r\n  render = (): JSX.Element => {\r\n    return (\r\n      <Provider store={store}>\r\n        <Router history={history}>\r\n          <Suspense fallback={<Loader />}>\r\n            <Switch>\r\n              <Route exact path=\"/\" component={MainPage} />\r\n              <Route exact path=\"/shop\" component={ShopPage} />\r\n              <Route exact path=\"/aboutUs\" component={AboutUsPage} />\r\n              <Route exact path=\"/contact\" component={ContactPage} />\r\n              <Route exact path=\"/product/:id\" component={ProductDetailsPage} />\r\n              <Route exact path=\"/cart\" component={CartPage} />\r\n              <Route exact path=\"/likes\" component={LikePage} />\r\n              <Route exact path=\"/:id\" component={NotFoundPage} />\r\n            </Switch>\r\n          </Suspense>\r\n        </Router>\r\n      </Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    )\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import './config'\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './containers/App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\n// normalize and basic styles for application\r\nimport 'normalize.css'\r\nimport 'antd/dist/antd.css'\r\nimport 'sources/styles/styles.scss'\r\nimport 'index.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}